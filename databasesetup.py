# -*- coding: utf-8 -*-
"""DatabaseSetup.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1d0AT0BBv_zHURJIGQk1FjhHzifdkrIvv

## Database Setup
"""

# !pip install sqlalchemy psycopg2

from sqlalchemy import create_engine, Column, Integer, String, DateTime, Text, Date, ForeignKey
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, relationship
import pandas as pd

"""### Database Setup with SQLite"""

Base = declarative_base()

# Define the Subreddit model
# Define the Subreddit model
class Subreddit(Base):
    __tablename__ = 'subreddits'
    id = Column(Integer, primary_key=True, autoincrement=True)
    name = Column(String, nullable=False, unique=True)
    description = Column(Text)
    subscribers = Column(Integer)
    created_utc = Column(Date)
    category = Column(String)

    posts = relationship("Post", back_populates="subreddit")

# Define the Post model
class Post(Base):
    __tablename__ = 'posts'
    id = Column(Integer, primary_key=True)
    subreddit_id = Column(Integer, ForeignKey('subreddits.id'))
    title = Column(String)
    selftext = Column(Text)
    upvotes = Column(Integer)
    downvotes = Column(Integer)
    created_utc = Column(Date)
    author = Column(String)
    subreddit = relationship("Subreddit", back_populates="posts")

# Create SQLite engine and session
engine = create_engine('sqlite:///reddit_data_new.db')
Base.metadata.create_all(engine)

Session = sessionmaker(bind=engine)
session = Session()

subreddits_df=pd.read_csv('Cleaned_metadata.csv')

del subreddits_df['Unnamed: 0']

subreddits_df.head()

posts_df=pd.read_csv('Cleaned_posts.csv')

del posts_df['Unnamed: 0']

posts_df.head()

subreddits_df['created_utc'] = pd.to_datetime(subreddits_df['created_utc']).dt.date
posts_df['created_utc'] = pd.to_datetime(posts_df['created_utc']).dt.date

"""## Insert Data into the Database"""

# Add unique subreddits to the session
added_subreddits = set()
for index, row in subreddits_df.iterrows():
    if row['name'] not in added_subreddits:
        subreddit = Subreddit(
            name=row['name'],
            description=row['description'],
            subscribers=row['subscribers'],
            created_utc=row['created_utc'],  # Now this is a date object
            category=row['category']
        )
        session.add(subreddit)
        added_subreddits.add(row['name'])

# Commit the subreddit data to generate IDs
session.commit()

# Create a dictionary to map subreddit names to their IDs
subreddit_name_to_id = {sub.name: sub.id for sub in session.query(Subreddit).all()}

# Add Post data
posts = []
for index, row in posts_df.iterrows():
    if row['subreddit'] in subreddit_name_to_id:
        post = Post(
            subreddit_id=subreddit_name_to_id.get(row['subreddit']),
            title=row['title'],
            selftext=row['selftext'],
            upvotes=row['upvotes'],
            downvotes=row['downvotes'],
            created_utc=row['created_utc'],
            author=row['author']
        )
        posts.append(post)

session.add_all(posts)
session.commit()

print("Data loaded successfully!")

"""## EDA"""

import pandas as pd
import sqlite3

# Connect to the SQLite database
conn = sqlite3.connect('reddit_data_new.db')

# Read the subreddit table
subreddit_df = pd.read_sql_query("SELECT * FROM subreddits", conn)
(subreddit_df)

# Read the post table
post_df = pd.read_sql_query("SELECT * FROM posts", conn)
(post_df)

# import seaborn as sns

# Query data
subreddits = session.query(Subreddit).all()
posts = session.query(Post).all()

# Convert to DataFrames
subreddits_df = pd.DataFrame([(sub.id, sub.name, sub.description, sub.subscribers, sub.created_utc, sub.category) for sub in subreddits],
                             columns=['id', 'name', 'description', 'subscribers', 'created_utc', 'category'])
posts_df = pd.DataFrame([(post.id, post.subreddit_id, post.title, post.selftext, post.upvotes, post.downvotes, post.created_utc, post.author) for post in posts],
                        columns=['id', 'subreddit_id', 'title', 'selftext', 'upvotes', 'downvotes', 'created_utc', 'author'])

# Display the first few rows of the dataframes
print(subreddits_df.head())
print(posts_df.head())

# Visualization: Number of posts per subreddit
plt.figure(figsize=(12, 8))
posts_per_subreddit = posts_df['subreddit_id'].value_counts().head(10)
sns.barplot(x=posts_per_subreddit.index, y=posts_per_subreddit.values, palette='viridis')
plt.xlabel('Subreddit ID')
plt.ylabel('Number of Posts')
plt.title('Top 10 Subreddits by Number of Posts')
plt.show()

# Visualization: Distribution of Upvotes
plt.figure(figsize=(12, 8))
sns.histplot(posts_df['upvotes'], bins=50, kde=True)
plt.xlabel('Upvotes')
plt.ylabel('Frequency')
plt.title('Distribution of Upvotes')
plt.show()

# # # Close the connection
# conn.close()

